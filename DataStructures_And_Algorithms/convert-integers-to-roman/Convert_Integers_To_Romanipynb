{"cells": [{"cell_type": "markdown", "id": "3124e2bb", "metadata": {}, "source": ["# Convert Integers to Roman \n", "\n", "_To learn how to use this template, check out the course [\"Data Structures and Algorithms in Python\"](https://jovian.ai/learn/data-structures-and-algorithms-in-python)._\n", "\n", "\n"]}, {"cell_type": "markdown", "id": "ce125e60", "metadata": {}, "source": ["## How to run the code and save your work\n", "\n", "The recommended way to run this notebook is to click the \"Run\" button at the top of this page, and select \"Run on Binder\". This will run the notebook on [mybinder.org](https://mybinder.org), a free online service for running Jupyter notebooks. \n", "\n", "This tutorial is an executable [Jupyter notebook](https://jupyter.org). You can _run_ this tutorial and experiment with the code examples in a couple of ways: *using free online resources* (recommended) or *on your computer*.\n", "\n", "#### Option 1: Running using free online resources (1-click, recommended)\n", "\n", "The easiest way to start executing the code is to click the **Run** button at the top of this page and select **Run on Binder**. You can also select \"Run on Colab\" or \"Run on Kaggle\", but you'll need to create an account on [Google Colab](https://colab.research.google.com) or [Kaggle](https://kaggle.com) to use these platforms.\n", "\n", "\n", "#### Option 2: Running on your computer locally\n", "\n", "To run the code on your computer locally, you'll need to set up [Python](https://www.python.org), download the notebook and install the required libraries. We recommend using the [Conda](https://docs.conda.io/projects/conda/en/latest/user-guide/install/) distribution of Python. Click the **Run** button at the top of this page, select the **Run Locally** option, and follow the instructions.\n", "\n", "#### Saving your work\n", "\n", "Before staring the assignment, let's save a snapshot of the assignment to your [Jovian](https://jovian.ai) profile, so that you can access it later, and continue your work."]}, {"cell_type": "code", "execution_count": 1, "id": "f80fab05", "metadata": {}, "outputs": [], "source": ["project_name = \"Convert Integers to Roman\""]}, {"cell_type": "code", "execution_count": 2, "id": "8a2b6c3c", "metadata": {}, "outputs": [], "source": ["!pip install jovian --upgrade --quiet"]}, {"cell_type": "code", "execution_count": 3, "id": "d024b030", "metadata": {}, "outputs": [], "source": ["import jovian"]}, {"cell_type": "code", "execution_count": 4, "id": "67dc0f3b", "metadata": {}, "outputs": [{"data": {"application/javascript": ["window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"], "text/plain": ["<IPython.core.display.Javascript object>"]}, "metadata": {}, "output_type": "display_data"}, {"name": "stdout", "output_type": "stream", "text": ["[jovian] Updating notebook \"ashwinibr17/convert-integers-to-roman\" on https://jovian.com\u001b[0m\n", "[jovian] Committed successfully! https://jovian.com/ashwinibr17/convert-integers-to-roman\u001b[0m\n"]}, {"data": {"text/plain": ["'https://jovian.com/ashwinibr17/convert-integers-to-roman'"]}, "execution_count": 4, "metadata": {}, "output_type": "execute_result"}], "source": ["jovian.commit(project=project_name)"]}, {"cell_type": "markdown", "id": "eb3aa522", "metadata": {}, "source": ["## Problem Statement\n", "\n", "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n", "\n", "Symbol       Value\n", "I             1\n", "V             5\n", "X             10\n", "L             50\n", "C             100\n", "D             500\n", "M             1000\n", "For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\n", "\n", "Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n", "\n", "I can be placed before V (5) and X (10) to make 4 and 9. \n", "X can be placed before L (50) and C (100) to make 40 and 90. \n", "C can be placed before D (500) and M (1000) to make 400 and 900.\n", "\n", "\n", "Given an integer, convert it to a roman numeral.\n", "\n", "\n", "Source: https://leetcode.com/problems/integer-to-roman/"]}, {"cell_type": "markdown", "id": "ebf48574", "metadata": {}, "source": ["## The Method\n", "\n", "Here's the systematic strategy we'll apply for solving problems:\n", "\n", "1. State the problem clearly. Identify the input & output formats.\n", "2. Come up with some example inputs & outputs. Try to cover all edge cases.\n", "3. Come up with a correct solution for the problem. State it in plain English.\n", "4. Implement the solution and test it using example inputs. Fix bugs, if any.\n", "5. Analyze the algorithm's complexity and identify inefficiencies, if any.\n", "6. Apply the right technique to overcome the inefficiency. Repeat steps 3 to 6.\n", "\n", "This approach is explained in detail in [Lesson 1](https://jovian.ai/learn/data-structures-and-algorithms-in-python/lesson/lesson-1-binary-search-linked-lists-and-complexity) of the course. Let's apply this approach step-by-step."]}, {"cell_type": "markdown", "id": "37d4fe68", "metadata": {}, "source": ["## Solution\n", "\n", "\n", "### 1. State the problem clearly. Identify the input & output formats.\n", "\n", "While this problem is stated clearly enough, it's always useful to try and express in your own words, in a way that makes it most clear for you. \n", "\n", "\n", "**Problem**\n", "\n", "> For the given integer, convert it into Roman numeral.\n", "\n", "<br/>\n", "\n", "\n", "**Input**\n", "\n", "1. Integer number\n", "\n", "\n", "**Output**\n", "\n", "1. Roman numeral\n", "\n", "\n", "<br/>\n", "\n", "Based on the above, we can now create a signature of our function:"]}, {"cell_type": "code", "execution_count": 5, "id": "e6f4d6e0", "metadata": {}, "outputs": [], "source": ["# Create a function signature here. The body of the function can contain a single statement: pass\n", "\n", "def intToroman():\n", "    pass;"]}, {"cell_type": "markdown", "id": "5794a33f", "metadata": {}, "source": ["Save and upload your work before continuing."]}, {"cell_type": "code", "execution_count": 6, "id": "7480b8cf", "metadata": {}, "outputs": [], "source": ["import jovian"]}, {"cell_type": "code", "execution_count": 7, "id": "fc194476", "metadata": {}, "outputs": [{"data": {"application/javascript": ["window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"], "text/plain": ["<IPython.core.display.Javascript object>"]}, "metadata": {}, "output_type": "display_data"}, {"name": "stdout", "output_type": "stream", "text": ["[jovian] Updating notebook \"ashwinibr17/convert-integers-to-roman\" on https://jovian.com\u001b[0m\n", "[jovian] Committed successfully! https://jovian.com/ashwinibr17/convert-integers-to-roman\u001b[0m\n"]}, {"data": {"text/plain": ["'https://jovian.com/ashwinibr17/convert-integers-to-roman'"]}, "execution_count": 7, "metadata": {}, "output_type": "execute_result"}], "source": ["jovian.commit()"]}, {"cell_type": "markdown", "id": "07223e69", "metadata": {}, "source": ["### 2. Come up with some example inputs & outputs. Try to cover all edge cases.\n", "\n", "Our function should be able to handle any set of valid inputs we pass into it. Here's a list of some possible variations we might encounter:\n", "\n", "1. 1 digit number as progressive addition\n", "2. 2 digit number as subtraction of smaller numeral\n", "3. 4 digit number\n", "4. 0 as input\n", "5. out of range number\n", "\n", "(add more if required)\n", "\n", "\n", "We'll express our test cases as dictionaries, to test them easily. Each dictionary will contain 2 keys: `input` (a dictionary itself containing one key for each argument to the function and `output` (the expected result from the function). "]}, {"cell_type": "code", "execution_count": 8, "id": "ddde578c", "metadata": {}, "outputs": [], "source": ["\n", "\n", "test0 = {\n", "         'input' :{'num': 3},\n", "         'output':'III'\n", "         }\n", "\n", "test1 = {\n", "         'input': {'num': 49},\n", "         'output': 'XLIX'\n", "         }\n", "test2 = {\n", "         'input': {'num': 1994},\n", "         'output': 'MCMXCIV'\n", "         }\n", "test3 = {\n", "         'input': {'num':0},\n", "         'output': 'There is no roman numeral for zero'\n", "         }\n", "test4 = {\n", "         'input': {'num':4001},\n", "         'output': 'Input out of range'\n", "         }"]}, {"cell_type": "markdown", "id": "ed2c160d", "metadata": {}, "source": ["Create one test case for each of the scenarios listed above. We'll store our test cases in an array called `tests`."]}, {"cell_type": "code", "execution_count": 9, "id": "a1f0bf7a", "metadata": {}, "outputs": [], "source": ["tests = [test0, test1,test2, test3, test4]"]}, {"cell_type": "code", "execution_count": 10, "id": "95b22fe6", "metadata": {}, "outputs": [{"data": {"text/plain": ["[{'input': {'num': 3}, 'output': 'III'},\n", " {'input': {'num': 49}, 'output': 'XLIX'},\n", " {'input': {'num': 1994}, 'output': 'MCMXCIV'},\n", " {'input': {'num': 0}, 'output': 'There is no roman numeral for zero'},\n", " {'input': {'num': 4001}, 'output': 'Input out of range'}]"]}, "execution_count": 10, "metadata": {}, "output_type": "execute_result"}], "source": ["tests"]}, {"cell_type": "markdown", "id": "33eeb7e5", "metadata": {}, "source": ["### 3. Come up with a correct solution for the problem. State it in plain English.\n", "\n", "Our first goal should always be to come up with a _correct_ solution to the problem, which may not necessarily be the most _efficient_ solution. Come with a correct solution and explain it in simple words below:\n", "\n", "1.  Check if the number is a 0 or greater than 3999. Display appropriate messages if so\n", "2. Store the roman numerals and the possible subtractions as a dictionary\n", "3. Do a strict division and modulo operation by 1000 on the number\n", "4. Add corresponding M's and continue working on the remainder number\n", "5. Check if the remainder is in the dictionary. If yes, append the corresponding roman sequence\n", "6. Repeat steps similar to 3, 4 and 5 for hundreds, tens and ones positions \n", "\n", "\n", "\n", "Let's save and upload our work before continuing.\n", "\n", "\n"]}, {"cell_type": "code", "execution_count": 11, "id": "6b700d57", "metadata": {}, "outputs": [{"data": {"application/javascript": ["window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"], "text/plain": ["<IPython.core.display.Javascript object>"]}, "metadata": {}, "output_type": "display_data"}, {"name": "stdout", "output_type": "stream", "text": ["[jovian] Updating notebook \"ashwinibr17/convert-integers-to-roman\" on https://jovian.com\u001b[0m\n", "[jovian] Committed successfully! https://jovian.com/ashwinibr17/convert-integers-to-roman\u001b[0m\n"]}, {"data": {"text/plain": ["'https://jovian.com/ashwinibr17/convert-integers-to-roman'"]}, "execution_count": 11, "metadata": {}, "output_type": "execute_result"}], "source": ["jovian.commit()"]}, {"cell_type": "markdown", "id": "2a1278ef", "metadata": {}, "source": ["###  4. Implement the solution and test it using example inputs. Fix bugs, if any."]}, {"cell_type": "code", "execution_count": 12, "id": "e053598e", "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["MCML\n"]}], "source": ["def intToRoman(num):\n", "        rN = dict()\n", "        rN[1] = 'I'\n", "        rN[5] = 'V'\n", "        rN[10] = 'X'\n", "        rN[50] = 'L'\n", "        rN[100] = 'C'\n", "        rN[500] = 'D'\n", "        rN[1000] = 'M'\n", "        rN[4] = 'IV'\n", "        rN[9] = 'IX'\n", "        rN[40] = 'XL'\n", "        rN[90] = 'XC'\n", "        rN[400] = 'CD'\n", "        rN[900] = 'CM'\n", "        \n", "        \n", "        ans =[]\n", "        th,hrd,tns,rem = 0,0,0,num\n", "        \n", "        if num == 0:\n", "            return (\"There is no roman numeral for zero\")\n", "        if num > 3999:\n", "            return (\"Input out of range\")\n", "        \n", "        if num in rN:\n", "            ans.append(rN[num])\n", "        else:\n", "            th= num //1000\n", "            rem = num % 1000\n", "\n", "            if th != 0:\n", "                for i in range(th):\n", "                    ans.append('M')\n", "\n", "                if rem in rN:\n", "                    ans.append(rN[rem])\n", "                    rem = 0\n", "        \n", "            hrd = rem // 100\n", "            rem = rem % 100\n", "\n", "\n", "            if hrd != 0:\n", "                if hrd == 4:\n", "                    ans.append(rN[400])\n", "                elif hrd == 9:\n", "                    ans.append(rN[900])\n", "                elif hrd > 4:\n", "                    ans.append('D')\n", "                    hrd = hrd-5\n", "                    for i in range(hrd):\n", "                        ans.append('C')\n", "                else:\n", "                    for i in range(hrd):\n", "                        ans.append('C')\n", "                if rem in rN:\n", "                    ans.append(rN[rem])\n", "                    rem = 0\n", "\n", "            tns = rem //10\n", "            rem = rem %10\n", "\n", "            if tns !=0 :\n", "                if tns == 4:\n", "                    ans.append(rN[40])\n", "                elif tns == 9:\n", "                    ans.append(rN[90])\n", "                elif tns > 4:\n", "                    ans.append('L')\n", "                    tns = tns-5\n", "                    for i in range(tns):\n", "                        ans.append('X')\n", "                else:\n", "                    for i in range(tns):\n", "                        ans.append('X')\n", "\n", "            if rem in rN:\n", "                ans.append(rN[rem])\n", "            else:\n", "                if rem > 4:\n", "                    ans.append('V')\n", "                    rem = rem-5\n", "                for i in range(rem):\n", "                    ans.append('I')\n", "        return ''.join(ans)\n", "        \n", "        \n", "num = 1950\n", "a=0\n", "a = intToRoman(num)\n", "print(a)"]}, {"cell_type": "code", "execution_count": 13, "id": "9502788a", "metadata": {}, "outputs": [{"data": {"application/javascript": ["window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"], "text/plain": ["<IPython.core.display.Javascript object>"]}, "metadata": {}, "output_type": "display_data"}, {"name": "stdout", "output_type": "stream", "text": ["[jovian] Updating notebook \"ashwinibr17/convert-integers-to-roman\" on https://jovian.com\u001b[0m\n", "[jovian] Committed successfully! https://jovian.com/ashwinibr17/convert-integers-to-roman\u001b[0m\n"]}, {"data": {"text/plain": ["'https://jovian.com/ashwinibr17/convert-integers-to-roman'"]}, "execution_count": 13, "metadata": {}, "output_type": "execute_result"}], "source": ["jovian.commit()"]}, {"cell_type": "markdown", "id": "05614538", "metadata": {}, "source": ["We can test the function by passing the input to it directly or by using the `evaluate_test_case` function from `jovian`."]}, {"cell_type": "code", "execution_count": 14, "id": "dc5a0e94", "metadata": {}, "outputs": [], "source": ["from jovian.pythondsa import evaluate_test_case"]}, {"cell_type": "code", "execution_count": 15, "id": "335c6418", "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["\n", "Input:\n", "{'num': 3}\n", "\n", "Expected Output:\n", "III\n", "\n", "\n", "Actual Output:\n", "III\n", "\n", "Execution Time:\n", "0.011 ms\n", "\n", "Test Result:\n", "\u001b[92mPASSED\u001b[0m\n", "\n"]}, {"data": {"text/plain": ["('III', True, 0.011)"]}, "execution_count": 15, "metadata": {}, "output_type": "execute_result"}], "source": ["evaluate_test_case(intToRoman, test0)"]}, {"cell_type": "markdown", "id": "ae0f993e", "metadata": {}, "source": ["Evaluate your function against all the test cases together using the `evaluate_test_cases` (plural) function from `jovian`."]}, {"cell_type": "code", "execution_count": 16, "id": "bf4423e1", "metadata": {}, "outputs": [], "source": ["from jovian.pythondsa import evaluate_test_cases"]}, {"cell_type": "code", "execution_count": 17, "id": "4cd15b25", "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["\n", "\u001b[1mTEST CASE #0\u001b[0m\n", "\n", "Input:\n", "{'num': 3}\n", "\n", "Expected Output:\n", "III\n", "\n", "\n", "Actual Output:\n", "III\n", "\n", "Execution Time:\n", "0.01 ms\n", "\n", "Test Result:\n", "\u001b[92mPASSED\u001b[0m\n", "\n", "\n", "\u001b[1mTEST CASE #1\u001b[0m\n", "\n", "Input:\n", "{'num': 49}\n", "\n", "Expected Output:\n", "XLIX\n", "\n", "\n", "Actual Output:\n", "XLIX\n", "\n", "Execution Time:\n", "0.007 ms\n", "\n", "Test Result:\n", "\u001b[92mPASSED\u001b[0m\n", "\n", "\n", "\u001b[1mTEST CASE #2\u001b[0m\n", "\n", "Input:\n", "{'num': 1994}\n", "\n", "Expected Output:\n", "MCMXCIV\n", "\n", "\n", "Actual Output:\n", "MCMXCIV\n", "\n", "Execution Time:\n", "0.008 ms\n", "\n", "Test Result:\n", "\u001b[92mPASSED\u001b[0m\n", "\n", "\n", "\u001b[1mTEST CASE #3\u001b[0m\n", "\n", "Input:\n", "{'num': 0}\n", "\n", "Expected Output:\n", "There is no roman numeral for zero\n", "\n", "\n", "Actual Output:\n", "There is no roman numeral for zero\n", "\n", "Execution Time:\n", "0.004 ms\n", "\n", "Test Result:\n", "\u001b[92mPASSED\u001b[0m\n", "\n", "\n", "\u001b[1mTEST CASE #4\u001b[0m\n", "\n", "Input:\n", "{'num': 4001}\n", "\n", "Expected Output:\n", "Input out of range\n", "\n", "\n", "Actual Output:\n", "Input out of range\n", "\n", "Execution Time:\n", "0.005 ms\n", "\n", "Test Result:\n", "\u001b[92mPASSED\u001b[0m\n", "\n", "\n", "\u001b[1mSUMMARY\u001b[0m\n", "\n", "TOTAL: 5, \u001b[92mPASSED\u001b[0m: 5, \u001b[91mFAILED\u001b[0m: 0\n"]}, {"data": {"text/plain": ["[('III', True, 0.01),\n", " ('XLIX', True, 0.007),\n", " ('MCMXCIV', True, 0.008),\n", " ('There is no roman numeral for zero', True, 0.004),\n", " ('Input out of range', True, 0.005)]"]}, "execution_count": 17, "metadata": {}, "output_type": "execute_result"}], "source": ["evaluate_test_cases(intToRoman,tests)"]}, {"cell_type": "markdown", "id": "f8474017", "metadata": {}, "source": ["Verify that all the test cases were evaluated. We expect them all to fail, since we haven't implemented the function yet.\n", "\n", "Let's save our work before continuing."]}, {"cell_type": "code", "execution_count": 18, "id": "4d2bd606", "metadata": {}, "outputs": [{"data": {"application/javascript": ["window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"], "text/plain": ["<IPython.core.display.Javascript object>"]}, "metadata": {}, "output_type": "display_data"}, {"name": "stdout", "output_type": "stream", "text": ["[jovian] Updating notebook \"ashwinibr17/convert-integers-to-roman\" on https://jovian.com\u001b[0m\n", "[jovian] Committed successfully! https://jovian.com/ashwinibr17/convert-integers-to-roman\u001b[0m\n"]}, {"data": {"text/plain": ["'https://jovian.com/ashwinibr17/convert-integers-to-roman'"]}, "execution_count": 18, "metadata": {}, "output_type": "execute_result"}], "source": ["jovian.commit()"]}, {"cell_type": "code", "execution_count": null, "id": "78597720", "metadata": {}, "outputs": [], "source": []}, {"cell_type": "markdown", "id": "d5cf2338", "metadata": {}, "source": ["### 5. Analyze the algorithm's complexity and identify inefficiencies, if any."]}, {"cell_type": "markdown", "id": "48d9e2d1", "metadata": {}, "source": ["Time Complexity : O(N)\n", "- There are for loops that may at maximum be called 9 times to print a given roman character\n", "- There are no nested for loops thus the time complexity remains linear\n", "- The maximum number of times a for loop can be called is 9N where N is the length of the given number\n", "- Discarding the constant, the time complexity can be approximated to O(N)\n", "\n", "\n", "Space Complexity: O(1)\n", "- The Roman numerals are stored in a dictionary for reference and conversion\n", "- Few additional variables are declared but they do no use any significant space\n", "- Space complexity can be safely approximated to a constant "]}, {"cell_type": "code", "execution_count": 19, "id": "f25fcb1f", "metadata": {}, "outputs": [{"data": {"application/javascript": ["window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"], "text/plain": ["<IPython.core.display.Javascript object>"]}, "metadata": {}, "output_type": "display_data"}, {"name": "stdout", "output_type": "stream", "text": ["[jovian] Updating notebook \"ashwinibr17/convert-integers-to-roman\" on https://jovian.com\u001b[0m\n", "[jovian] Committed successfully! https://jovian.com/ashwinibr17/convert-integers-to-roman\u001b[0m\n"]}, {"data": {"text/plain": ["'https://jovian.com/ashwinibr17/convert-integers-to-roman'"]}, "execution_count": 19, "metadata": {}, "output_type": "execute_result"}], "source": ["jovian.commit()"]}, {"cell_type": "markdown", "id": "925bb247", "metadata": {}, "source": ["### 6. Apply the right technique to overcome the inefficiency. Repeat steps 3 to 6."]}, {"cell_type": "code", "execution_count": 20, "id": "b4d77ba8", "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["XI\n"]}], "source": ["def intToRoman(num):\n", "        rN = {\n", "            1000: 'M',\n", "            900: 'CM',\n", "            500: 'D',\n", "            400: 'CD',\n", "            100: 'C',\n", "            90: 'XC',\n", "            50: 'L',\n", "            40: 'XL',\n", "            10: 'X',\n", "            9: 'IX',\n", "            5: 'V',\n", "            4: 'IV',\n", "            1: 'I'\n", "        }\n", "        result = \"\"\n", "        for value, symbol in rN.items():\n", "            while num >= value:\n", "                result += symbol\n", "                num -= value\n", "        return result\n", "num = 11\n", "res = intToRoman(num)\n", "print(res)"]}, {"cell_type": "code", "execution_count": 21, "id": "2bd55d5c", "metadata": {}, "outputs": [{"data": {"application/javascript": ["window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"], "text/plain": ["<IPython.core.display.Javascript object>"]}, "metadata": {}, "output_type": "display_data"}, {"name": "stdout", "output_type": "stream", "text": ["[jovian] Updating notebook \"ashwinibr17/convert-integers-to-roman\" on https://jovian.com\u001b[0m\n", "[jovian] Committed successfully! https://jovian.com/ashwinibr17/convert-integers-to-roman\u001b[0m\n"]}, {"data": {"text/plain": ["'https://jovian.com/ashwinibr17/convert-integers-to-roman'"]}, "execution_count": 21, "metadata": {}, "output_type": "execute_result"}], "source": ["jovian.commit()"]}, {"cell_type": "markdown", "id": "d2ea2801", "metadata": {}, "source": ["### 7. Come up with a correct solution for the problem. State it in plain English.\n", "\n", "Come with the optimized correct solution and explain it in simple words below:\n", "\n", "1. Consider given number in expanded form\n", "2. Save all possible roman outcomes for a digit in a all number positions in separate lists\n", "3. Compute the expanded form of the number in the return statement itself\n", "4. Concatenate the roman numerals as a string in the return statement \n", "5. The time complexity is reduced to O(1) while no significant changes to space complexity as well, which remains at O(1)\n", "\n", "\n", "\n", "Let's save and upload our work before continuing.\n"]}, {"cell_type": "markdown", "id": "1d9aff20", "metadata": {}, "source": ["### 8. Implement the solution and test it using example inputs. Fix bugs, if any."]}, {"cell_type": "code", "execution_count": 22, "id": "919ab94d", "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["MCML\n"]}], "source": ["def intToRoman(num):\n", "    ones = [\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"]\n", "    tens = [\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"]\n", "    hrns = [\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"]\n", "    ths = [\"\",\"M\",\"MM\",\"MMM\"]\n", "    return (ths[num//1000] + hrns[(num%1000)//100] + tens[(num%100)//10] + ones[num%10])\n", "    \n", "num =1950\n", "ans = intToRoman(num)\n", "print (ans)   "]}, {"cell_type": "code", "execution_count": 23, "id": "b0c66977", "metadata": {}, "outputs": [{"data": {"application/javascript": ["window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"], "text/plain": ["<IPython.core.display.Javascript object>"]}, "metadata": {}, "output_type": "display_data"}, {"name": "stdout", "output_type": "stream", "text": ["[jovian] Updating notebook \"ashwinibr17/convert-integers-to-roman\" on https://jovian.com\u001b[0m\n", "[jovian] Committed successfully! https://jovian.com/ashwinibr17/convert-integers-to-roman\u001b[0m\n"]}, {"data": {"text/plain": ["'https://jovian.com/ashwinibr17/convert-integers-to-roman'"]}, "execution_count": 23, "metadata": {}, "output_type": "execute_result"}], "source": ["jovian.commit()"]}, {"cell_type": "markdown", "id": "c55a5beb", "metadata": {}, "source": ["### 9. Analyze the algorithm's complexity and identify inefficiencies, if any."]}, {"cell_type": "markdown", "id": "9e47e393", "metadata": {}, "source": ["Time Complexity:\n", "- As there are no loops in the code, the time complexity is O(1)\n", "\n", "Space Complexity:\n", "- As there are no additional variables defined or used other than the list of possible roman values, space complexity is O(1)"]}, {"cell_type": "markdown", "id": "78511145", "metadata": {}, "source": ["If you found the problem on an external platform, you can make a submission to test your solution.\n", "\n", "Share your approach and start a discussion on the Jovian forum: https://jovian.ai/forum/c/data-structures-and-algorithms-in-python/78"]}, {"cell_type": "code", "execution_count": null, "id": "f5638477", "metadata": {}, "outputs": [{"data": {"application/javascript": ["window.require && require([\"base/js/namespace\"],function(Jupyter){Jupyter.notebook.save_checkpoint()})"], "text/plain": ["<IPython.core.display.Javascript object>"]}, "metadata": {}, "output_type": "display_data"}], "source": ["jovian.commit()"]}, {"cell_type": "code", "execution_count": null, "id": "3b953d9d", "metadata": {}, "outputs": [], "source": []}], "metadata": {"language_info": {"codemirror_mode": {"name": "ipython", "version": 3}, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.9.7"}}, "nbformat": 4, "nbformat_minor": 5}
